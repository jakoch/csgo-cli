#
# .github/workflows/build-on-windows.yml
#
# Copyright 2021 Jens A. Koch.
# SPDX-License-Identifier: BSL-1.0
# This file is part of https://github.com/jakoch/csgo-cli
#

name: "Build on Windows"

on: [push, pull_request]

jobs:

# ---------------------------------------------------------------------------------------

  build-on-windows-2022:

# ---------------------------------------------------------------------------------------

    name: "Windows VC17"
    runs-on: windows-2022

    env:
      COMPILER: "VC17"
      BUILD_TYPE: Release
      VCPKG_ROOT: C:\vcpkg
      VCPKG_TARGET_TRIPLET: x64-windows-static
      BUILD_SHARED_LIBS: OFF
      # MSVC parallel builds: https://devblogs.microsoft.com/cppblog/improved-parallelism-in-msbuild/
      UseMultiToolTask: true
      EnforceProcessCountAcrossBuilds: true

    defaults:
      run:
        shell: cmd

    steps:
      - name: 🤘 Checkout Code
        uses: actions/checkout@v3 # https://github.com/actions/checkout
        with:
          submodules: true
          
      # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2022-Readme.md#visual-studio-enterprise-2022
      - name: 📥 Setup VC17 Environment (→ vcvars64)
        run: call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"

      - name: ℹ Show Tool Versions
        run: |
          date /T
          time /T
          curl -V
          cmake --version
          msbuild /version
          cl /Bv
          vcpkg version
          echo NUMBER_OF_PROCESSORS=%NUMBER_OF_PROCESSORS%

      - name: 🔽 Update VCPKG
        run: |
          cd ${{ env.VCPKG_ROOT }}
          git reset --hard
          git pull --quiet
          bootstrap-vcpkg.bat -disableMetrics
          vcpkg integrate install --triplet=${{ env.VCPKG_TARGET_TRIPLET }} --feature-flags=manifests
          vcpkg version

      - name: 🎯 Cache VCPKG
        if: always()
        id: cache-vcpkg
        uses: actions/cache@v3.2.3 # https://github.com/actions/cache
        with:
          path: ~\AppData\Local\vcpkg
          key: cache-windows-vcpkg-${{ env.VCPKG_TARGET_TRIPLET }}-${{ github.ref }}-${{ github.run_number }}
          restore-keys: |
            cache-windows-vcpkg-${{ env.VCPKG_TARGET_TRIPLET }}-${{ github.ref }}
            cache-windows-vcpkg-${{ env.VCPKG_TARGET_TRIPLET }}

      - name: Extract SW_SDK
        env:
          SW_SDK_SECRET: ${{ secrets.SW_SDK_SECRET }}
        run: |
          dir
          7z x ${{ github.workspace }}\downloads\sw_sdk_153a.zip -aoa -y -odependencies -p%SW_SDK_SECRET%
          cd dependencies
          ren sdk sw_sdk

      - name: Patch CSGO Protobufs
        working-directory: ${{ github.workspace }}
        run: dependencies\csgo-protobufs-patch\patch.bat

      - name: ❔ CHECK important folders, to see if everything is present (before building)
        run: |
          dir ${{ github.workspace }}
          dir ${{ github.workspace }}\downloads
          dir ${{ github.workspace }}\dependencies
          dir ${{ github.workspace }}\dependencies\csgo-protobufs

      - name: ✏ CMake ➔ Configure (including VCPKG → Install Dependencies)
        run: |
          cmake -G "Visual Studio 17 2022" -A x64                                              ^
                -S ${{ github.workspace }} -B build                                         ^
                -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}                                       ^
                -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake  ^
                -DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_TARGET_TRIPLET }}                         ^
                -DBUILD_SHARED_LIBS=${{ env.BUILD_SHARED_LIBS }}                               ^
                -DCMAKE_VERBOSE_MAKEFILE=ON

      - name: 🙏 CMake → Build
        run: cmake --build build --config %BUILD_TYPE% -j %NUMBER_OF_PROCESSORS%

      - name: ✔ ❌✔️ Test → Run TestSuite
        run: |
          cd build\tests\%BUILD_TYPE%
          test_suite.exe

      - name: ✔ ❌✔️ Test → Run CTest → Generate test_results.xml
        run: |
          cd build\tests
          ctest -V -C %BUILD_TYPE% --output-junit test_results_${{ env.VCPKG_TARGET_TRIPLET }}_${{ env.COMPILER }}.xml

      - name: 📦 CMake ➔ Install
        run: cmake --install build --config %BUILD_TYPE% --prefix install --verbose

      - name: ❔ CHECK important folders, to see if everything is present (after building & installing)
        run: |
          dir /S /B build
          dir /S /B build\vcpkg_installed\${{ env.VCPKG_TARGET_TRIPLET }}
          dir /S /B install

      # We upload multiple files into the same "test-results" artifact file (zip).
      # Each file is differently named by adding the job name of the matrix as a suffix.
      # This enables the "Unit Test Result" display to show all individual test runs of the matrix.
      # The tests are published after all matrix runs finished (from job: "publish-test-results").
      - name: 🔼 Upload Test Results
        uses: actions/upload-artifact@v3 # https://github.com/actions/upload-artifact
        if: always()
        with:
          name: test-results
          path: build\tests\test_results_*.xml

      - name: 🔼 Upload Build Artifact -> csgo_cli
        uses: actions/upload-artifact@v3 # https://github.com/actions/upload-artifact
        with:
          name: csgo_cli-${{ env.VCPKG_TARGET_TRIPLET }}-${{ env.COMPILER }}
          path: ${{ github.workspace }}/install/bin/

      - name: 🔼 Upload Build Artifact -> CMakeOutput.log
        uses: actions/upload-artifact@v3 # https://github.com/actions/upload-artifact
        if: always()
        continue-on-error: true
        with:
          name: CMakeOutput.log
          path: build/CMakeFiles/CMakeOutput.log

      - name: 🔼 Upload Build Artifact -> CMakeError.log
        uses: actions/upload-artifact@v3 # https://github.com/actions/upload-artifact
        if: always()
        continue-on-error: true
        with:
          name: CMakeError.log
          path: build/CMakeFiles/CMakeError.log

# ---------------------------------------------------------------------------------------

  publish-test-results:

# ---------------------------------------------------------------------------------------

    # Only publish test results, when the action runs in your repository's context.
    # In other words: this disables publishing tests results from pull requests.
    # PR test results are published from the standalone workflow "publish-PR-test-results.yml".

    name: "Publish Tests Results"
    needs: build-on-windows-2022
    runs-on: ubuntu-latest
    if: always() && ( github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository )

    steps:

      - name: 🔽 Download Artifacts
        uses: actions/download-artifact@v2 # https://github.com/actions/download-artifact
        with:
          path: artifacts

      - name: 👌 Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2 # https://github.com/EnricoMi/publish-unit-test-result-action
        if: always()
        with:
          files: artifacts/**/test_results*.xml

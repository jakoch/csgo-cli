# Build worker image (VM template)
image: Visual Studio 2017

clone_depth: 5

version: '{build}'

platform: x64

configuration: Release

environment:
  MSBUILD_FLAGS: /verbosity:minimal /maxcpucount
  SW_SDK_SECRET:
    secure: qgCgBWgiHGn0ZsNdQEAQmw==

build:
  verbosity: minimal

# scripts that are called at very beginning, before repo cloning
init:
  - date /T & time /T
  - cmake --version
  - msbuild /version
  # Set "build version number" to "short-commit-hash" or when tagged to "tag name" (Travis style)
  - ps: >-
      if ($env:APPVEYOR_REPO_TAG -eq "true")
      {
        Update-AppveyorBuild -Version "$env:APPVEYOR_REPO_TAG_NAME"
      }
      else
      {
        Update-AppveyorBuild -Version "dev-$($env:APPVEYOR_REPO_COMMIT.substring(0,7))"
      }

install:
  # 1) Get Git Submodules: csgo-protobufs
  - git submodule update --init --recursive
  # 2) Secure-File (needed to decrypt sw sdk)
  - nuget install secure-file -Version 1.0.31
  - ps: Test-Path C:\projects\csgo-cli\secure-file.1.0.31\tools\secure-file.exe 
  # 3) SW SDK (prebuild libs + src) 
  - C:\projects\csgo-cli\secure-file.1.0.31\tools\secure-file.exe -decrypt C:\projects\csgo-cli\downloads\sw_sdk_144.zip.enc -secret %SW_SDK_SECRET% -out C:\projects\csgo-cli\downloads\sw_sdk_144.zip
  - 7z x C:\projects\csgo-cli\downloads\sw_sdk_144.zip -aoa -y -oC:\projects\csgo-cli\dependencies
  - cd C:\projects\csgo-cli\dependencies
  - ren sdk sw_sdk
  - cd C:\projects\csgo-cli
  # 4) Google Protobuf (src)
  - ps: Invoke-WebRequest "https://github.com/google/protobuf/releases/download/v3.7.0/protobuf-cpp-3.7.0.zip" -OutFile C:\projects\csgo-cli\downloads\protobuf-cpp-3.7.0.zip
  - 7z x C:\projects\csgo-cli\downloads\protobuf-cpp-3.7.0.zip -aoa -y -oC:\projects\csgo-cli\dependencies
  - cd C:\projects\csgo-cli\dependencies
  - ren protobuf-3.7.0 protobuf   
  - cd C:\projects\csgo-cli
  # 5) MPIR
  - vcpkg install mpir:x64-windows
  - cd C:\Tools\vcpkg\packages
  - ren mpir_x64-windows mpir
  - move C:\Tools\vcpkg\packages\mpir C:\projects\csgo-cli\dependencies
  # 6) cURL, including zlib
  - vcpkg install curl:x64-windows
  - cd C:\Tools\vcpkg\packages
  - ren curl_x64-windows curl
  - ren zlib_x64-windows zlib  
  - move C:\Tools\vcpkg\packages\curl C:\projects\csgo-cli\dependencies
  - move C:\Tools\vcpkg\packages\zlib C:\projects\csgo-cli\dependencies
  # 7) Cert for cURL (cacert.pem)
  - ps: Invoke-WebRequest "https://curl.haxx.se/ca/cacert.pem" -OutFile C:\projects\csgo-cli\dependencies\curl\bin\cacert.pem  
  # 8) RapidJSON
  - vcpkg install rapidjson:x64-windows
  - cd C:\Tools\vcpkg\packages
  - ren rapidjson_x64-windows rapidjson
  - move C:\Tools\vcpkg\packages\rapidjson C:\projects\csgo-cli\dependencies
  # 9) CHECK: output content of folder, to see if everything is present
  - dir C:\projects\csgo-cli\downloads\
  - dir C:\projects\csgo-cli\dependencies\
  - dir C:\projects\csgo-cli\dependencies\csgo-protobufs

before_build:
  # Build Dependencies
  # 1.1) Compile Protobuf
  - cd C:\projects\csgo-cli\dependencies\protobuf\cmake
  # 1.2) Configure Protobuf
  - cmake -G "Visual Studio 15 2017" -A x64 -Dprotobuf_BUILD_TESTS=OFF -protobuf_BUILD_CONFORMANCE=OFF -Dprotobuf_BUILD_EXAMPLES=OFF -Dprotobuf_MSVC_STATIC_RUNTIME=OFF -DZLIB_LIBRARY=C:\projects\csgo-cli\dependencies\zlib\lib\zlib.lib -DZLIB_INCLUDE_DIR=C:\projects\csgo-cli\dependencies\zlib\include .
  # 1.3) Build Protobuf
  - cmake --build . --config Release --target install
  # 2) Patch CSGO Protobufs
  - C:\projects\csgo-cli\dependencies\csgo-protobufs-patch\patch.bat
  # return
  - cd C:\projects\csgo-cli

build_script:
  - cmake -G "Visual Studio 15 2017" -A x64 -DCMAKE_TOOLCHAIN_FILE=c:/tools/vcpkg/scripts/buildsystems/vcpkg.cmake .
  - msbuild C:\projects\csgo-cli\csgo_cli.sln /m /p:Configuration=Release /p:Platform=x64 /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll" 

after_build:
  # 1) prepare packaging for csgo-cli
  # 1.1) check release folder
  - dir C:\projects\csgo-cli\build\
  - dir C:\projects\csgo-cli\build\Release\
  # 1.2) copy stuff from release to build folder and remove release folder
  - copy C:\projects\csgo-cli\build\Release\*.* C:\projects\csgo-cli\build
  - cd C:\projects\csgo-cli\build
  - rmdir /s /q Release
  # 1.3) rename build folder to csgo-cli
  - cd C:\projects\csgo-cli
  - ren build csgo-cli
  # 1.4) CHECK: output content of folder, to see if everything is present
  - dir C:\projects\csgo-cli\csgo-cli\
  # 2) package
  - 7z a csgo-cli.zip csgo-cli
  # 3) test csgo-cli
  - C:\projects\csgo-cli\csgo-cli\csgo_cli.exe -V
  - C:\projects\csgo-cli\csgo-cli\csgo_cli.exe -help
  # 4) package dependencies folder  
  # 4.1) delete unecrypted sw_sdk folder
  - cd C:\projects\csgo-cli\dependencies
  - rmdir /S /Q sw_sdk
  - rmdir /S /Q csgo-protobufs-patch
  # 4.2) copy securefile + enrypted sw_sdk
  - mkdir C:\projects\csgo-cli\dependencies\sw_sdk
  - copy C:\projects\csgo-cli\secure-file.1.0.31\tools\secure-file.exe C:\projects\csgo-cli\dependencies\sw_sdk
  - copy C:\projects\csgo-cli\downloads\sw_sdk_144.zip.enc C:\projects\csgo-cli\dependencies\sw_sdk
  # 4.3) package dependencies folder
  - dir C:\projects\csgo-cli\dependencies
  - cd C:\projects\csgo-cli
  - 7z a csgo-cli-deps.zip C:\projects\csgo-cli\dependencies\

artifacts:
  - path: csgo-cli.zip
    name: csgo-cli
  - path: csgo-cli-deps.zip
    name: csgo-cli-deps

#deploy: